[[plugins]]
repo   = 'Shougo/denite.nvim'
hook_add = '''
    let g:denite_enable_start_insert=1
    let g:denite_source_history_yank_enable=1
    "prefix keyの設定
    nmap <Space> [denite]
    " カレントディレクトリを表示
    nnoremap <silent> [denite]a :<C-u>Denite<Space>file_rec<CR>
    " バッファと最近開いたファイル一覧を表示
    nnoremap <silent> [denite]<Space> :<C-u>Denite -direction=topleft buffer file_mru<CR>
    " 検索する(結果をプレビューで表示する)
    nnoremap <silent> [denite]s :<C-u>Denite -auto-action grep<CR>
    " 前回のバッファを再表示する
    nnoremap <silent> [denite]b :<C-u>Denite -resume<CR>
    " レジスタ一覧
    nnoremap <silent> [denite]r :<C-u>Denite -direction=topleft -buffer-name=register register<CR>
'''

hook_post_source = '''
    call denite#custom#option('default', 'prompt', '%')
    " ノーマルモードで起動、jjでノーマルへ
    call denite#custom#option('default', {'mode': 'normal'})
    call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>')
    " deniteの起動位置をtopに変更
    call denite#custom#option('default', 'direction', 'top')
'''

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1
'''
# set completeopt+=noinsert

# Rubyの自動補完
[[plugins]]
repo = 'fishbullet/deoplete-ruby'
on_event = 'InsertEnter'
on_ft = ['ruby']

# filer
# 設定のリファレンス：https://github.com/Shougo/defx.nvim/blob/master/doc/defx.txt
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
    " space + f でdefxを起動, 画面左側に縦に開くようにする
    nnoremap <silent> <leader>f :<C-u>Defx -split=vertical -winwidth=30 -direction=topleft<CR>
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
      nnoremap <silent><buffer><expr> <CR>  defx#do_action('drop')
      nnoremap <silent><buffer><expr> c     defx#do_action('copy')
      nnoremap <silent><buffer><expr> m     defx#do_action('move')
      nnoremap <silent><buffer><expr> p     defx#do_action('paste')
      nnoremap <silent><buffer><expr> l     defx#do_action('open')
      nnoremap <silent><buffer><expr> E     defx#do_action('open', 'vsplit')
      nnoremap <silent><buffer><expr> P     defx#do_action('open', 'pedit')
      nnoremap <silent><buffer><expr> o     defx#do_action('open_or_close_tree')
      nnoremap <silent><buffer><expr> K     defx#do_action('new_directory')
      nnoremap <silent><buffer><expr> N     defx#do_action('new_file')
      nnoremap <silent><buffer><expr> M     defx#do_action('new_multiple_files')
      nnoremap <silent><buffer><expr> C     defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
      nnoremap <silent><buffer><expr> S     defx#do_action('toggle_sort', 'time')
      nnoremap <silent><buffer><expr> d     defx#do_action('remove')
      nnoremap <silent><buffer><expr> r     defx#do_action('rename')
      nnoremap <silent><buffer><expr> !     defx#do_action('execute_command')
      nnoremap <silent><buffer><expr> x     defx#do_action('execute_system')
      nnoremap <silent><buffer><expr> yy    defx#do_action('yank_path')
      nnoremap <silent><buffer><expr> .     defx#do_action('toggle_ignored_files')
      nnoremap <silent><buffer><expr> ;     defx#do_action('repeat')
      nnoremap <silent><buffer><expr> :     defx#do_action('toggle_select') . 'j'
      nnoremap <silent><buffer><expr> h     defx#do_action('cd', ['..'])
      nnoremap <silent><buffer><expr> ~     defx#do_action('cd')
      nnoremap <silent><buffer><expr> q     defx#do_action('quit')
      nnoremap <silent><buffer><expr> *     defx#do_action('toggle_select_all')
      nnoremap <silent><buffer><expr> j     line('.') == line('$') ? 'gg' : 'j'
      nnoremap <silent><buffer><expr> k     line('.') == 1 ? 'G' : 'k'
      nnoremap <silent><buffer><expr> cd    defx#do_action('change_vim_cwd')
      nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
      nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    endfunction
'''

hook_post_source = '''
    call defx#custom#option('_', {'columns': 'indent:git:icons:filename', 'show_ignored_files': 1})
'''

hook_source = '''
    " FIXME: 設定がうまく効いていない
    " For bronson/vim-trailing-whitespace
    let g:extra_whitespace_ignored_filetypes = ['defx', '']
'''

[[plugins]] # search
repo = 'junegunn/fzf'
build = './install --all'
merged = '0'

# rg コマンドのoption: https://www.mankier.com/1/rg#Options
# rg -l コマンドを入れてプレビュー時にファイル名のみ表示するようにしたいが
# なぜか挙動が変わるため入れていない
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:60%:wrap'))

    command! -bang -nargs=* Fzfbuffer
      \ call fzf#vim#buffers({'options': '--exact --reverse'})

    command! -bang -nargs=* Fzfhistory
      \ call fzf#vim#history({'options': '--exact --reverse'})
'''

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby']

# Rubyのend補完
[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertEnter'
on_ft = ['ruby']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_post_source = '''
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_extra_types = 1
'''

# deopleteのgo補完
# .go拡張子の場合のみプラグインを読み込む
[[plugins]]
repo = 'deoplete-plugins/deoplete-go'
build = 'make'
on_ft = ['go']
# depends = ['deoplete.nvim']
# golangの補完 gocodeのbinaryファイルがないと動かないので注意
hook_source = '''
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]] # TOMLのシンタックスハイライト
repo  = 'cespare/vim-toml'
on_ft = ['toml']
